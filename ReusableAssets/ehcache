src/main/java/com/example/sessiondemo/Application.java
--------------------------------------------------
package com.example.sessiondemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}


src/main/java/com/example/sessiondemo/config/CacheConfig.java
--------------------------------------------------
package com.example.sessiondemo.config;

import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.ehcache.EhCacheCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.cache.CacheManager;

@Configuration
@EnableCaching
public class CacheConfig {

    @Bean
    public CacheManager cacheManager() {
        return new EhCacheCacheManager(net.sf.ehcache.CacheManager.create());
    }
}


src/main/java/com/example/sessiondemo/store/SessionStore.java
--------------------------------------------------
package com.example.sessiondemo.store;

import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Component;

@Component
public class SessionStore {

    private final Cache sessionCache;

    public SessionStore(CacheManager cacheManager) {
        this.sessionCache = cacheManager.getCache("sessionCache");
        if (this.sessionCache == null) {
            throw new IllegalStateException("sessionCache not found. Check EHCache config.");
        }
    }

    public void put(String sessionId, String key, Object value) {
        sessionCache.put(sessionId + ":" + key, value);
    }

    public <T> T get(String sessionId, String key, Class<T> type) {
        return sessionCache.get(sessionId + ":" + key, type);
    }

    public void remove(String sessionId, String key) {
        sessionCache.evict(sessionId + ":" + key);
    }

    public void invalidate(String sessionId) {
        // EHCache 2.x does not support invalidation by prefix directly
        // This can be implemented with a custom cache wrapper
    }
}


src/main/java/com/example/sessiondemo/store/SessionIdResolver.java
--------------------------------------------------
package com.example.sessiondemo.store;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
public class SessionIdResolver {

    private static final String SESSION_COOKIE_NAME = "X-SESSION-ID";

    public String resolve(HttpServletRequest request, HttpServletResponse response, boolean createIfAbsent) {
        String sid = null;
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (SESSION_COOKIE_NAME.equals(cookie.getName())) {
                    sid = cookie.getValue();
                    break;
                }
            }
        }

        if (sid == null && createIfAbsent) {
            sid = UUID.randomUUID().toString();
            Cookie cookie = new Cookie(SESSION_COOKIE_NAME, sid);
            cookie.setPath("/");
            cookie.setHttpOnly(true);
            cookie.setMaxAge(1800);
            response.addCookie(cookie);
        }

        return sid;
    }
}


src/main/java/com/example/sessiondemo/controller/UserController.java
--------------------------------------------------
package com.example.sessiondemo.controller;

import com.example.sessiondemo.store.SessionIdResolver;
import com.example.sessiondemo.store.SessionStore;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.*;

@RestController
public class UserController {

    private final SessionStore sessionStore;
    private final SessionIdResolver sessionIdResolver;

    public UserController(SessionStore sessionStore, SessionIdResolver sessionIdResolver) {
        this.sessionStore = sessionStore;
        this.sessionIdResolver = sessionIdResolver;
    }

    @PostMapping("/login")
    public String login(HttpServletRequest request, HttpServletResponse response) {
        String sessionId = sessionIdResolver.resolve(request, response, true);
        sessionStore.put(sessionId, "user", "john123");
        return "User stored in EHCache.";
    }

    @GetMapping("/me")
    public String getUser(HttpServletRequest request, HttpServletResponse response) {
        String sessionId = sessionIdResolver.resolve(request, response, false);
        if (sessionId == null) {
            return "No session exists.";
        }
        String user = sessionStore.get(sessionId, "user", String.class);
        return user != null ? "User: " + user : "Session exists, but no user data.";
    }

    @PostMapping("/logout")
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        String sessionId = sessionIdResolver.resolve(request, response, false);
        if (sessionId != null) {
            sessionStore.remove(sessionId, "user");
        }
        return "Session invalidated.";
    }
}


src/main/resources/ehcache.xml
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd">

    <diskStore path="java.io.tmpdir"/>

    <defaultCache
        maxElementsInMemory="10000"
        eternal="false"
        timeToIdleSeconds="300"
        timeToLiveSeconds="600"
        overflowToDisk="false"/>

    <cache name="sessionCache"
           maxElementsInMemory="10000"
           eternal="false"
           timeToIdleSeconds="300"
           timeToLiveSeconds="600"
           overflowToDisk="false"/>

</ehcache>


pom.xml
--------------------------------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://www.w3.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>sessiondemo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.18</version>
        <relativePath/>
    </parent>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <version>2.10.9.2</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
